# Production Docker Compose configuration with health checks
version: '3.8'

services:
  # MongoDB with persistence and health checks
  mongodb:
    image: mongo:7.0
    container_name: fraud-evidence-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: fraudDB
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./Backend/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fraud-network

  # Kafka with Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fraud-evidence-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraud-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fraud-evidence-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fraud-network

  # Backend API service
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile.production
    container_name: fraud-evidence-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "5050:5050"
    environment:
      NODE_ENV: production
      PORT: 5050
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/fraudDB?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: fraud-evidence-backend
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-http://localhost:8080}
      BLOCKCHAIN_WS_URL: ${BLOCKCHAIN_WS_URL:-ws://localhost:8080}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      BLOCKCHAIN_API_KEY: ${BLOCKCHAIN_API_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - backend_logs:/app/logs
      - backend_storage:/app/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fraud-network

  # Frontend service
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.production
    container_name: fraud-evidence-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:80"
    environment:
      VITE_BACKEND_URL: http://localhost:5050
      VITE_API_VERSION: v1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fraud-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: fraud-evidence-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraud-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: fraud-evidence-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraud-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-evidence-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fraud-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-evidence-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fraud-network

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: fraud-evidence-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraud-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: fraud-evidence-logstash
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - backend_logs:/var/log/backend:ro
    networks:
      - fraud-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: fraud-evidence-kibana
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - fraud-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  fraud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
