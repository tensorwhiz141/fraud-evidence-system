// services/reportTemplateService.js
const fs = require('fs');
const path = require('path');

class ReportTemplateService {
  constructor() {
    this.templatesDir = path.join(__dirname, '..', 'templates', 'reports');
    this.ensureDirectories();
  }

  ensureDirectories() {
    if (!fs.existsSync(this.templatesDir)) {
      fs.mkdirSync(this.templatesDir, { recursive: true });
    }
  }

  // Generate styled HTML for case report
  generateCaseHTML(data, options = {}) {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Case Report - ${data.caseId}</title>
        <style>
            ${this.getReportCSS()}
        </style>
    </head>
    <body>
        ${options.watermark ? '<div class="watermark">CONFIDENTIAL</div>' : ''}
        
        <!-- Header -->
        <div class="header">
            <h1>üõ°Ô∏è Fraud Investigation Report</h1>
            <div class="case-info">
                <div class="case-id">Case ID: <span>${data.caseId}</span></div>
                <div class="generated-at">Generated: ${data.generatedAt.toISOString()}</div>
                <div class="status ${data.summary.currentStatus?.toLowerCase().replace(' ', '-')}">Status: ${data.summary.currentStatus}</div>
            </div>
        </div>

        <!-- Executive Summary -->
        <div class="section executive-summary">
            <h2>üìä Executive Summary</h2>
            <div class="summary-grid">
                <div class="summary-item">
                    <div class="label">Total Reports</div>
                    <div class="value">${data.summary.totalReports}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Evidence Files</div>
                    <div class="value">${data.summary.totalEvidence}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Escalations</div>
                    <div class="value">${data.summary.totalEscalations}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Entities Involved</div>
                    <div class="value">${data.summary.entitiesInvolved}</div>
                </div>
            </div>
            
            <div class="key-findings">
                <h3>üîç Key Findings</h3>
                <ul>
                    ${data.summary.keyFindings.map(finding => `<li>${finding}</li>`).join('')}
                </ul>
            </div>
        </div>

        <!-- Entities Involved -->
        <div class="section entities">
            <h2>üë§ Entities Under Investigation</h2>
            <div class="entities-list">
                ${data.summary.entities.map(entity => `
                    <div class="entity-card">
                        <div class="entity-address">${entity}</div>
                        <div class="entity-stats">
                            Reports: ${data.reports.filter(r => r.entityId === entity).length} |
                            Evidence: ${data.evidence.filter(e => e.entity === entity).length}
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>

        ${options.includeEvidence ? this.generateEvidenceSection(data.evidence) : ''}
        ${options.includeRiskEvolution ? this.generateRiskEvolutionSection(data.riskHistory) : ''}
        ${options.includeEscalations ? this.generateEscalationSection(data.escalations) : ''}
        ${options.includeTimeline ? this.generateTimelineSection(data.timeline) : ''}
        
        <!-- Footer -->
        <div class="footer">
            <p>This report was automatically generated by the Fraud Evidence System</p>
            <p>Document ID: ${data.caseId}-${Date.now()}</p>
        </div>
    </body>
    </html>
    `;
    
    return html;
  }

  // Generate entity-specific HTML
  generateEntityHTML(data, options = {}) {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Entity Report - ${data.entity}</title>
        <style>
            ${this.getReportCSS()}
        </style>
    </head>
    <body>
        ${options.watermark ? '<div class="watermark">CONFIDENTIAL</div>' : ''}
        
        <!-- Header -->
        <div class="header">
            <h1>üîç Entity Investigation Report</h1>
            <div class="case-info">
                <div class="case-id">Entity: <span>${data.entity}</span></div>
                <div class="generated-at">Generated: ${data.generatedAt.toISOString()}</div>
                <div class="status ${data.summary.currentRiskLevel?.toLowerCase()}">Risk: ${data.summary.currentRiskLevel}</div>
            </div>
        </div>

        <!-- Entity Summary -->
        <div class="section executive-summary">
            <h2>üìä Entity Analysis</h2>
            <div class="summary-grid">
                <div class="summary-item">
                    <div class="label">Total Reports</div>
                    <div class="value">${data.summary.totalReports}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Evidence Files</div>
                    <div class="value">${data.summary.totalEvidence}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Escalations</div>
                    <div class="value">${data.summary.totalEscalations}</div>
                </div>
                <div class="summary-item">
                    <div class="label">Current Risk</div>
                    <div class="value risk-${data.summary.currentRiskLevel?.toLowerCase()}">${data.summary.currentRiskLevel}</div>
                </div>
            </div>
        </div>

        ${this.generateEntityRiskProgressionSection(data.summary.riskProgression)}
        ${options.includeEvidence ? this.generateEvidenceSection(data.evidence) : ''}
        ${options.includeTimeline ? this.generateTimelineSection(data.timeline) : ''}
        
        <!-- Footer -->
        <div class="footer">
            <p>This report was automatically generated by the Fraud Evidence System</p>
            <p>Entity: ${data.entity} | Generated: ${data.generatedAt.toISOString()}</p>
        </div>
    </body>
    </html>
    `;
    
    return html;
  }

  // Generate styled CSS for reports
  getReportCSS() {
    return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #fff;
        }
        
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 6rem;
            color: rgba(255, 0, 0, 0.1);
            font-weight: bold;
            z-index: -1;
            pointer-events: none;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 300;
        }
        
        .case-info {
            display: flex;
            gap: 2rem;
            font-size: 1.1rem;
            flex-wrap: wrap;
        }
        
        .case-info .case-id span {
            font-weight: bold;
            background: rgba(255,255,255,0.2);
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
        }
        
        .status {
            padding: 0.2rem 0.8rem;
            border-radius: 20px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .status.active {
            background: #ffeaa7;
            color: #d63031;
        }
        
        .status.escalated {
            background: #fab1a0;
            color: #e17055;
        }
        
        .status.under-review {
            background: #a8e6cf;
            color: #00b894;
        }
        
        .status.high {
            background: #ff7675;
            color: #fff;
        }
        
        .status.medium {
            background: #fdcb6e;
            color: #333;
        }
        
        .status.low {
            background: #00b894;
            color: #fff;
        }
        
        .section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            page-break-inside: avoid;
        }
        
        .executive-summary {
            background: #f8f9ff;
            border-left: 5px solid #6c5ce7;
        }
        
        .section h2 {
            color: #2d3436;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            border-bottom: 2px solid #ddd;
            padding-bottom: 0.5rem;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .summary-item {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .summary-item .label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .summary-item .value {
            font-size: 2rem;
            font-weight: bold;
            color: #6c5ce7;
        }
        
        .value.risk-high {
            color: #d63031;
        }
        
        .value.risk-medium {
            color: #e17055;
        }
        
        .value.risk-low {
            color: #00b894;
        }
        
        .key-findings {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
        }
        
        .key-findings h3 {
            margin-bottom: 1rem;
            color: #e17055;
        }
        
        .key-findings ul {
            list-style: none;
        }
        
        .key-findings li {
            padding: 0.5rem 0;
            padding-left: 1.5rem;
            position: relative;
        }
        
        .key-findings li:before {
            content: 'üîç';
            position: absolute;
            left: 0;
        }
        
        .entities-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
        }
        
        .entity-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #00b894;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .entity-address {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: #2d3436;
            word-break: break-all;
        }
        
        .entity-stats {
            font-size: 0.9rem;
            color: #666;
        }
        
        .evidence-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
        }
        
        .evidence-item {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #e17055;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .evidence-filename {
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        
        .evidence-hash {
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            color: #666;
            word-break: break-all;
            margin-bottom: 0.5rem;
        }
        
        .evidence-meta {
            font-size: 0.9rem;
            color: #666;
        }
        
        .evidence-meta div {
            margin-bottom: 0.2rem;
        }
        
        .timeline-event {
            display: flex;
            align-items: flex-start;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .timeline-icon {
            font-size: 1.5rem;
            margin-right: 1rem;
            margin-top: 0.2rem;
        }
        
        .timeline-content {
            flex: 1;
        }
        
        .timeline-timestamp {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.3rem;
        }
        
        .timeline-description {
            font-weight: bold;
            margin-bottom: 0.3rem;
        }
        
        .timeline-data {
            font-size: 0.9rem;
            color: #666;
        }
        
        .risk-progression {
            background: #fff5f5;
            border-left: 5px solid #ff7675;
        }
        
        .risk-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            margin-bottom: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .risk-level {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: bold;
            text-transform: uppercase;
            margin-right: 1rem;
            min-width: 80px;
            text-align: center;
        }
        
        .risk-level.high {
            background: #ff7675;
            color: white;
        }
        
        .risk-level.medium {
            background: #fdcb6e;
            color: #333;
        }
        
        .risk-level.low {
            background: #00b894;
            color: white;
        }
        
        .risk-details {
            flex: 1;
        }
        
        .risk-details div {
            margin-bottom: 0.2rem;
            font-size: 0.9rem;
            color: #666;
        }
        
        .escalation-item {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #ff7675;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
        }
        
        .escalation-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-weight: bold;
        }
        
        .escalation-entity {
            font-family: 'Courier New', monospace;
            color: #2d3436;
        }
        
        .escalation-score {
            color: #d63031;
        }
        
        .escalation-details div {
            margin-bottom: 0.3rem;
            font-size: 0.9rem;
            color: #666;
        }
        
        .footer {
            margin-top: 3rem;
            padding: 2rem;
            background: #f8f9fa;
            text-align: center;
            color: #666;
            border-top: 1px solid #ddd;
            page-break-inside: avoid;
        }
        
        .timeline-note {
            font-style: italic;
            color: #666;
            text-align: center;
            margin-top: 1rem;
        }
        
        @media print {
            .section {
                break-inside: avoid;
            }
            
            .header {
                break-after: avoid;
            }
            
            .timeline-event {
                break-inside: avoid;
            }
        }
        
        @page {
            margin: 2cm;
            size: A4;
        }
    `;
  }

  // Generate evidence section HTML
  generateEvidenceSection(evidence) {
    if (!evidence || evidence.length === 0) {
      return '<div class="section"><h2>üìé Evidence Files</h2><p>No evidence files found.</p></div>';
    }

    const evidenceItems = evidence.map(item => `
        <div class="evidence-item">
            <div class="evidence-filename">üìÑ ${item.originalFilename}</div>
            <div class="evidence-hash">Hash: ${item.fileHash}</div>
            <div class="evidence-meta">
                <div>Size: ${this.formatFileSize(item.fileSize)}</div>
                <div>Uploaded: ${new Date(item.uploadedAt).toLocaleString()}</div>
                <div>Status: ${item.verificationStatus}</div>
                <div>Risk Level: ${item.riskLevel}</div>
                <div>Redundancy: ${item.redundancyCount || 0} locations</div>
            </div>
        </div>
    `).join('');

    return `
        <div class="section evidence">
            <h2>üìé Evidence Files</h2>
            <div class="evidence-grid">
                ${evidenceItems}
            </div>
        </div>
    `;
  }

  // Generate timeline section HTML
  generateTimelineSection(timeline) {
    if (!timeline || !timeline.timeline || timeline.timeline.length === 0) {
      return '<div class="section"><h2>‚è±Ô∏è Investigation Timeline</h2><p>No timeline events found.</p></div>';
    }

    const timelineItems = timeline.timeline.slice(0, 20).map(event => `
        <div class="timeline-event">
            <div class="timeline-icon">${event.icon}</div>
            <div class="timeline-content">
                <div class="timeline-timestamp">${new Date(event.timestamp).toLocaleString()}</div>
                <div class="timeline-description">${event.description}</div>
                <div class="timeline-data">
                    Type: ${event.type} | 
                    Priority: ${event.priority} |
                    Entity: ${event.entity || 'N/A'}
                </div>
            </div>
        </div>
    `).join('');

    return `
        <div class="section timeline">
            <h2>‚è±Ô∏è Investigation Timeline</h2>
            <div class="timeline-events">
                ${timelineItems}
            </div>
            ${timeline.timeline.length > 20 ? `<p class="timeline-note">Showing first 20 of ${timeline.timeline.length} events</p>` : ''}
        </div>
    `;
  }

  // Generate risk evolution section
  generateRiskEvolutionSection(riskHistory) {
    if (!riskHistory || riskHistory.length === 0) {
      return '<div class="section"><h2>üìà Risk Evolution</h2><p>No risk assessment history found.</p></div>';
    }

    const riskItems = riskHistory.map(risk => `
        <div class="risk-item">
            <div class="risk-level ${risk.level?.toLowerCase()}">${risk.level}</div>
            <div class="risk-details">
                <div>Entity: ${risk.entity || risk.wallet}</div>
                <div>Reports: ${risk.reportCount}</div>
                <div>Updated: ${new Date(risk.updatedAt).toLocaleString()}</div>
            </div>
        </div>
    `).join('');

    return `
        <div class="section risk-evolution">
            <h2>üìà Risk Evolution</h2>
            <div class="risk-history">
                ${riskItems}
            </div>
        </div>
    `;
  }

  // Generate escalation section
  generateEscalationSection(escalations) {
    if (!escalations || escalations.length === 0) {
      return '<div class="section"><h2>üö® Escalations</h2><p>No escalations found.</p></div>';
    }

    const escalationItems = escalations.map(esc => `
        <div class="escalation-item">
            <div class="escalation-header">
                <div class="escalation-entity">${esc.entity}</div>
                <div class="escalation-score">Risk Score: ${esc.riskScore}</div>
            </div>
            <div class="escalation-details">
                <div>Trigger: ${esc.trigger}</div>
                <div>Date: ${new Date(esc.createdAt).toLocaleString()}</div>
                <div>Status: ${esc.webhookResponse?.error ? 'Failed' : 'Success'}</div>
            </div>
        </div>
    `).join('');

    return `
        <div class="section escalations">
            <h2>üö® Escalations</h2>
            <div class="escalation-list">
                ${escalationItems}
            </div>
        </div>
    `;
  }

  // Generate entity risk progression section
  generateEntityRiskProgressionSection(progression) {
    if (!progression || progression.length === 0) {
      return '<div class="section"><h2>üìà Risk Progression</h2><p>No risk progression data available.</p></div>';
    }

    const progressionItems = progression.map(item => `
        <div class="risk-item">
            <div class="risk-level ${item.level?.toLowerCase()}">${item.level}</div>
            <div class="risk-details">
                <div>Sequence: ${item.sequence}</div>
                <div>Reports: ${item.reportCount}</div>
                <div>Date: ${new Date(item.date).toLocaleString()}</div>
            </div>
        </div>
    `).join('');

    return `
        <div class="section risk-progression">
            <h2>üìà Risk Progression</h2>
            <div class="risk-history">
                ${progressionItems}
            </div>
        </div>
    `;
  }

  // Helper method for file size formatting
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

module.exports = new ReportTemplateService();