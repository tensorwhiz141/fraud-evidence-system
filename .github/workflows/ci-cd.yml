# CI/CD Pipeline for Fraud Evidence System
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGO_VERSION: '7.0'
  KAFKA_VERSION: '7.4.0'

jobs:
  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            Backend/package-lock.json
            Frontend/package-lock.json

      - name: Install Backend Dependencies
        run: |
          cd Backend
          npm ci

      - name: Install Frontend Dependencies
        run: |
          cd Frontend
          npm ci

      - name: Run ESLint (Backend)
        run: |
          cd Backend
          npm run lint || true

      - name: Run ESLint (Frontend)
        run: |
          cd Frontend
          npm run lint || true

      - name: Security Audit (Backend)
        run: |
          cd Backend
          npm audit --audit-level=high || true

      - name: Security Audit (Frontend)
        run: |
          cd Frontend
          npm audit --audit-level=high || true

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:${{ env.MONGO_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:${{ env.KAFKA_VERSION }}
        ports:
          - 9092:9092
        env:
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Backend/package-lock.json

      - name: Install Dependencies
        run: |
          cd Backend
          npm ci

      - name: Create Test Environment
        run: |
          cd Backend
          cp .env.example .env.test
          echo "MONGO_URI=mongodb://localhost:27017/fraudDB_test" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ADMIN_EMAIL=test@example.com" >> .env.test
          echo "ADMIN_PASSWORD=testpassword123" >> .env.test

      - name: Run Unit Tests
        run: |
          cd Backend
          npm run test:unit
        env:
          NODE_ENV: test

      - name: Run Integration Tests
        run: |
          cd Backend
          npm run test:integration
        env:
          NODE_ENV: test

      - name: Run RBAC Tests
        run: |
          cd Backend
          npm run test:rbac
        env:
          NODE_ENV: test

      - name: Generate Test Coverage
        run: |
          cd Backend
          npm run test:coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: Backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd Frontend
          npm ci

      - name: Run Unit Tests
        run: |
          cd Frontend
          npm run test -- --coverage --watchAll=false

      - name: Run E2E Tests
        run: |
          cd Frontend
          npm run test:e2e || true

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: Frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            Backend/package-lock.json
            Frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd Backend && npm ci
          cd ../Frontend && npm ci

      - name: Build Backend
        run: |
          cd Backend
          npm run build

      - name: Build Frontend
        run: |
          cd Frontend
          npm run build

      - name: Build Docker Images
        run: |
          docker build -t fraud-evidence-backend:latest ./Backend
          docker build -t fraud-evidence-frontend:latest ./Frontend

      - name: Save Docker Images
        run: |
          docker save fraud-evidence-backend:latest | gzip > backend-image.tar.gz
          docker save fraud-evidence-frontend:latest | gzip > frontend-image.tar.gz

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            backend-image.tar.gz
            frontend-image.tar.gz

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          gunzip -c backend-image.tar.gz | docker load
          gunzip -c frontend-image.tar.gz | docker load

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # docker-compose -f docker-compose.staging.yml up -d

      - name: Run Health Checks
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # curl -f http://staging.fraudevidence.com/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          gunzip -c backend-image.tar.gz | docker load
          gunzip -c frontend-image.tar.gz | docker load

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          # docker-compose -f docker-compose.production.yml up -d

      - name: Run Health Checks
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # curl -f https://api.fraudevidence.com/health

      - name: Notify Deployment
        run: |
          echo "Deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run Load Tests
        run: |
          artillery run Backend/loadtest.yml

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: artillery-report.html
